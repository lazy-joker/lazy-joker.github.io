{"componentChunkName":"component---src-templates-blog-article-js","path":"/article/202011-aws-iot","result":{"data":{"microcmsArticles":{"title":"Raspberry PiをAWS IoT Coreに接続","body":"<h2 id=\"hc77b57de51\">あらまし</h2><p>以前の記事ではRaspberry Piで動くDiscordボットをPythonで作る方法を紹介しました。<br>今回はこのDiscordボットに修正を加え、AWS IoT Coreに接続する方法を説明します。<br></p><h2 id=\"hc06e7af3cd\">AWS側の準備</h2><p>AWSのサービスコンソールから「AWS IoT Core」を開き、「管理」&#x2F;「モノ」を選択します。<br><img src=\"https://images.microcms-assets.io/protected/ap-northeast-1:9e5272dd-7b4e-43ed-93af-2c67006519ff/service/og-blog/media/%E3%82%B3%E3%83%A1%E3%83%B3%E3%83%88%202020-11-18%20214128.png\" alt><br><br>「モノ」を開いたら、「作成」を選択し、「単一のモノを作成する」を選択します。<br><img src=\"https://images.microcms-assets.io/protected/ap-northeast-1:9e5272dd-7b4e-43ed-93af-2c67006519ff/service/og-blog/media/%E3%82%B3%E3%83%A1%E3%83%B3%E3%83%88%202020-11-18%20214300.png\" alt><br><br>続いて、モノの名前を入力し、「次へ」を選択します。<br><img src=\"https://images.microcms-assets.io/protected/ap-northeast-1:9e5272dd-7b4e-43ed-93af-2c67006519ff/service/og-blog/media/%E3%82%B3%E3%83%A1%E3%83%B3%E3%83%88%202020-11-18%20214559.png\" alt><br><br>続いて、「証明書を作成」を選択します。<br><img src=\"https://images.microcms-assets.io/protected/ap-northeast-1:9e5272dd-7b4e-43ed-93af-2c67006519ff/service/og-blog/media/%E3%82%B3%E3%83%A1%E3%83%B3%E3%83%88%202020-11-18%20214825.png\" alt><br><br>証明書が作成された旨が表示されるので、証明書3つと<br>AWS IoTのルートCAをローカルファイルに保存しておきます。<br><img src=\"https://images.microcms-assets.io/protected/ap-northeast-1:9e5272dd-7b4e-43ed-93af-2c67006519ff/service/og-blog/media/%E3%82%B3%E3%83%A1%E3%83%B3%E3%83%88%202020-11-18%20220204.png\" alt><br></p><h2 id=\"h05d86630f8\">Raspberry Piに暗号鍵を保存</h2><p>AWS IoT のモノの登録時にダウンロードした証明書ファイル(4つ)をRaspberry Piにコピーします。<br></p><h2 id=\"h495c9f066e\">Pythonスクリプトの修正</h2><p>ボットプログラムの開始時に以下のコードを実行するようにします。<br>コード中の&lt;エンドポイントURL&gt;は、AWS IoTのコンソールから作成したモノを選択して「相互作用」を開くと確認できます。<br>AWSでモノの登録をしたときにダウンロードした証明書ファイルはconfigureCredential()の引数で参照しています。<br></p><pre><code>from AWSIoTPythonSDK.MQTTLib import AWSIoTMQTTClient\nmyMQTTClient = AWSIoTMQTTClient(&quot;raspi-home&quot;)\nmyMQTTClient.configureEndpoint(&quot;&lt;エンドポイントURL&gt;&quot;, 443)\nmyMQTTClient.configureCredentials(&quot;.&#x2F;cert&#x2F;root.pem&quot;, &quot;.&#x2F;cert&#x2F;f0e00cdc2f-private.pem.key&quot;, &quot;.&#x2F;cert&#x2F;f0e00cdc2f-certificate.pem.crt&quot;)\nmyMQTTClient.configureOfflinePublishQueueing(-1)\nmyMQTTClient.configureDrainingFrequency(2)\nmyMQTTClient.configureConnectDisconnectTimeout(10)\nmyMQTTClient.configureMQTTOperationTimeout(5)</code></pre><p><br>以下のコードで、JSON形式データをAWS IoT Coreにパブリッシュ(送出)します。<br>パブリッシュ先のトピック名は「test」としています。</p><pre><code>sensor_data = bme680tph.get_sensor()\njson_data = json.dumps({&quot;temp&quot;: sensor_data[0], &quot;pres&quot;: sensor_data[1], &quot;moist&quot;: sensor_data[2], &quot;datetime&quot;: datetime.now().strftime(&quot;%Y&#x2F;%m&#x2F;%d %H:%M:%S&quot;)})\nmyMQTTClient.publish(&quot;test&quot;, json_data, 0)</code></pre><p><br></p><h2 id=\"ha214098e44\">まとめ</h2><p>今回は、AWS IoT Coreにモノを登録する方法と<br>Raspberry Pi上のPythonプログラムからAWS IoT Coreにデータを送信する方法を紹介しました。<br><br>次回は、送信されたJSONデータをデータベース(DynamoDB)に保存する方法について説明します。</p>","slug":"202011-aws-iot","publishedAt":"2020年11月18日","writer":"proactive-cybernetics","tags":[{"name":"IoTデバイス","slug":"iot-device"},{"name":"Webサーバーサイド","slug":"web-server"}]}},"pageContext":{"slug":"202011-aws-iot"}},"staticQueryHashes":["272570591","3000541721","3649515864"]}